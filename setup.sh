#!/bin/bash

# FUTO Keyboard Setup Script
# Interactive setup for development environment and signing configuration

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Function to print colored output
print_step() {
    echo -e "${BLUE}[STEP $1]${NC} $2"
}

print_success() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

print_info() {
    echo -e "${CYAN}â„¹${NC} $1"
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to get user input with default
get_input() {
    local prompt="$1"
    local default="$2"
    local response

    if [ -n "$default" ]; then
        read -p "$prompt [$default]: " response
        response=${response:-$default}
    else
        read -p "$prompt: " response
    fi

    echo "$response"
}

# Function to create keystore
create_keystore() {
    print_step "1" "Creating Android Keystore for signing"

    local keystore_path="release.keystore"
    local alias="futo-keyboard"

    if [ -f "$keystore_path" ]; then
        print_warning "Keystore already exists at $keystore_path"
        read -p "Overwrite? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Using existing keystore"
            return 0
        fi
    fi

    echo
    print_info "You'll need to provide information for the keystore certificate."
    print_info "This information will be publicly visible in your APK signature."
    echo

    # Get keystore passwords
    while true; do
        KEYSTORE_PASSWORD=$(get_input "Enter keystore password (min 6 characters)" "changeit")
        if [ ${#KEYSTORE_PASSWORD} -lt 6 ]; then
            print_error "Password must be at least 6 characters"
            continue
        fi
        break
    done

    while true; do
        KEY_PASSWORD=$(get_input "Enter key password (same as keystore for simplicity)" "$KEYSTORE_PASSWORD")
        if [ ${#KEY_PASSWORD} -lt 6 ]; then
            print_error "Password must be at least 6 characters"
            continue
        fi
        break
    done

    # Get certificate information
    CERT_NAME=$(get_input "Your full name" "Developer")
    CERT_ORG=$(get_input "Organization" "Independent")
    CERT_CITY=$(get_input "City" "Unknown")
    CERT_STATE=$(get_input "State/Province" "Unknown")
    CERT_COUNTRY=$(get_input "Country code (2 letters)" "US")

    echo
    print_info "Creating keystore with the following information:"
    echo "  Name: $CERT_NAME"
    echo "  Organization: $CERT_ORG"
    echo "  City: $CERT_CITY"
    echo "  State: $CERT_STATE"
    echo "  Country: $CERT_COUNTRY"
    echo

    # Create keystore
    if keytool -genkey -v -keystore "$keystore_path" \
        -alias "$alias" \
        -keyalg RSA \
        -keysize 2048 \
        -validity 10000 \
        -storepass "$KEYSTORE_PASSWORD" \
        -keypass "$KEY_PASSWORD" \
        -dname "CN=$CERT_NAME, OU=Development, O=$CERT_ORG, L=$CERT_CITY, ST=$CERT_STATE, C=$CERT_COUNTRY"; then

        print_success "Keystore created successfully at $keystore_path"
        KEY_ALIAS="$alias"
    else
        print_error "Failed to create keystore"
        return 1
    fi
}

# Function to create .env file
create_env_file() {
    print_step "2" "Creating .env file"

    if [ -f ".env" ]; then
        print_warning ".env file already exists"
        read -p "Overwrite? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            print_info "Keeping existing .env file"
            return 0
        fi
    fi

    cat > .env << EOF
# FUTO Keyboard Build Environment Variables
# Generated by setup.sh on $(date)

# Android Signing Configuration
ORG_GRADLE_PROJECT_keystorePassword=$KEYSTORE_PASSWORD
ORG_GRADLE_PROJECT_keyAlias=$KEY_ALIAS
ORG_GRADLE_PROJECT_keyPassword=$KEY_PASSWORD

# Keystore path (relative to project root)
# ORG_GRADLE_PROJECT_keystorePath=release.keystore
EOF

    print_success ".env file created successfully"
    print_info "You can now build signed APKs locally with: ./gradlew assembleUnstableRelease"
}

# Function to test build
test_build() {
    print_step "3" "Testing build configuration"

    if [ ! -f ".env" ]; then
        print_error ".env file not found. Please run setup first."
        return 1
    fi

    print_info "Testing Gradle build..."
    if ./gradlew assembleUnstableDebug --quiet; then
        print_success "Debug build successful"
    else
        print_error "Debug build failed"
        return 1
    fi

    print_info "Testing release build..."
    if ./gradlew assembleUnstableRelease --quiet; then
        print_success "Release build successful"
        print_info "Signed APK created at: build/outputs/apk/unstable/release/latinime-unstable-release.apk"
    else
        print_error "Release build failed"
        return 1
    fi
}

# Function to show GitHub setup instructions
show_github_setup() {
    print_step "4" "GitHub Actions Setup Instructions"

    echo
    print_info "To set up automated releases on GitHub, follow these steps:"
    echo

    echo "1. Encode your keystore for GitHub Secrets:"
    echo "   base64 -w 0 release.keystore > keystore_base64.txt"
    echo

    echo "2. Go to your GitHub repository:"
    echo "   https://github.com/norpie/futo/settings/secrets/actions"
    echo

    echo "3. Add these repository secrets:"
    echo "   ANDROID_KEYSTORE     â†’ Content of keystore_base64.txt"
    echo "   KEYSTORE_PASSWORD    â†’ $KEYSTORE_PASSWORD"
    echo "   KEY_ALIAS           â†’ $KEY_ALIAS"
    echo "   KEY_PASSWORD        â†’ $KEY_PASSWORD"
    echo

    echo "4. Create a release:"
    echo "   ./bump_version.sh --patch"
    echo "   git push origin v1.2.4"
    echo

    print_success "GitHub setup instructions displayed above"
}

# Function to check prerequisites
check_prerequisites() {
    print_step "0" "Checking Prerequisites"

    local missing_deps=()

    # Check Java
    if command_exists java; then
        JAVA_VERSION=$(java -version 2>&1 | head -n 1 | cut -d'"' -f2)
        print_success "Java found: $JAVA_VERSION"
    else
        missing_deps+=("Java (OpenJDK 17+ recommended)")
    fi

    # Check Gradle
    if [ -f "./gradlew" ]; then
        print_success "Gradle wrapper found"
    else
        missing_deps+=("Gradle wrapper (run: gradle wrapper)")
    fi

    # Check keytool
    if command_exists keytool; then
        print_success "Keytool found (for keystore creation)"
    else
        missing_deps+=("Keytool (usually comes with Java)")
    fi

    # Check git
    if command_exists git; then
        print_success "Git found"
    else
        missing_deps+=("Git")
    fi

    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "Missing prerequisites:"
        for dep in "${missing_deps[@]}"; do
            echo "  - $dep"
        done
        echo
        print_info "Please install missing dependencies and run setup again."
        exit 1
    fi

    print_success "All prerequisites satisfied"
}

# Main setup function
main() {
    echo
    echo -e "${PURPLE}ðŸš€ FUTO Keyboard Development Setup${NC}"
    echo -e "${PURPLE}=====================================${NC}"
    echo

    # Check prerequisites
    check_prerequisites

    echo
    echo -e "${YELLOW}This script will guide you through setting up:${NC}"
    echo "  â€¢ Android keystore for APK signing"
    echo "  â€¢ Local environment configuration (.env)"
    echo "  â€¢ Build testing"
    echo "  â€¢ GitHub Actions setup instructions"
    echo

    read -p "Continue with setup? (Y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Nn]$ ]]; then
        print_info "Setup cancelled."
        exit 0
    fi

    # Create keystore
    create_keystore

    # Create .env file
    create_env_file

    # Test build
    test_build

    # Show GitHub setup
    show_github_setup

    echo
    echo -e "${GREEN}ðŸŽ‰ Setup Complete!${NC}"
    echo
    print_info "Your development environment is ready!"
    print_info "You can now:"
    echo "  â€¢ Build locally: ./gradlew assembleUnstableRelease"
    echo "  â€¢ Create releases: ./bump_version.sh --patch"
    echo "  â€¢ Push to GitHub to trigger automated releases"
    echo
    print_info "Don't forget to set up GitHub Actions secrets for automated releases."
}

# Run main function
main "$@"