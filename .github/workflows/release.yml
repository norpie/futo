name: Release APK

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Setup keystore
      run: |
        echo "=== Setting up Keystore ==="
        if [ -n "${{ secrets.ANDROID_KEYSTORE }}" ]; then
          echo "✅ ANDROID_KEYSTORE secret is set"
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > release.keystore
          echo "✅ Keystore decoded and saved"
          ls -la release.keystore
        else
          echo "❌ ANDROID_KEYSTORE secret is not set"
          echo "Please set the ANDROID_KEYSTORE secret in GitHub repository settings"
          exit 1
        fi

        # Verify keystore with keytool
        echo "Verifying keystore..."
        if keytool -list -keystore release.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEY_ALIAS }}" >/dev/null 2>&1; then
          echo "✅ Keystore verification successful"
        else
          echo "❌ Keystore verification failed"
          echo "Please check your keystore secrets configuration"
          exit 1
        fi

    - name: Build release APK
      run: |
        echo "=== Starting Release Build ==="
        echo "Java version:"
        java -version
        echo ""
        echo "Gradle version:"
        ./gradlew --version
        echo ""
        echo "Environment variables:"
        echo "KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD:+SET}"
        echo "KEY_ALIAS: ${KEY_ALIAS:+SET}"
        echo "KEY_PASSWORD: ${KEY_PASSWORD:+SET}"
        echo ""
        echo "=== Running Gradle Build ==="
        ./gradlew assembleUnstableRelease --info --stacktrace
        BUILD_EXIT_CODE=$?
        echo "Build exit code: $BUILD_EXIT_CODE"
        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          echo "❌ Build failed with exit code $BUILD_EXIT_CODE"
          exit 1
        fi
        echo "✅ Build completed successfully"
      env:
        ORG_GRADLE_PROJECT_keystorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
        ORG_GRADLE_PROJECT_keyAlias: ${{ secrets.KEY_ALIAS }}
        ORG_GRADLE_PROJECT_keyPassword: ${{ secrets.KEY_PASSWORD }}

    - name: Get version name
      id: version
      run: |
        echo "=== Getting Version Information ==="
        VERSION_NAME=$(./gradlew -q printVersionName | tail -1)
        echo "Raw version output: '$VERSION_NAME'"
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "Version: $VERSION_NAME"

    - name: Verify build outputs
      run: |
        echo "=== Verifying Build Outputs ==="
        echo "Checking build directory structure..."
        if [ -d "build" ]; then
          echo "✅ Build directory exists"
          ls -la build/
        else
          echo "❌ Build directory not found"
          exit 1
        fi

        if [ -d "build/outputs" ]; then
          echo "✅ Build outputs directory exists"
          ls -la build/outputs/
        else
          echo "❌ Build outputs directory not found"
          exit 1
        fi

        if [ -d "build/outputs/apk" ]; then
          echo "✅ APK directory exists"
          ls -la build/outputs/apk/
        else
          echo "❌ APK directory not found"
          exit 1
        fi

        if [ -d "build/outputs/apk/unstable" ]; then
          echo "✅ Unstable APK directory exists"
          ls -la build/outputs/apk/unstable/
        else
          echo "❌ Unstable APK directory not found"
          exit 1
        fi

        if [ -d "build/outputs/apk/unstable/release" ]; then
          echo "✅ Release APK directory exists"
          ls -la build/outputs/apk/unstable/release/
        else
          echo "❌ Release APK directory not found"
          exit 1
        fi

        APK_PATH="build/outputs/apk/unstable/release/latinime-unstable-release.apk"
        if [ -f "$APK_PATH" ]; then
          echo "✅ APK file found: $APK_PATH"
          ls -la "$APK_PATH"
          echo "APK size: $(stat -c%s "$APK_PATH") bytes"
        else
          echo "❌ APK file not found at: $APK_PATH"
          echo "Contents of release directory:"
          ls -la build/outputs/apk/unstable/release/ || echo "Directory listing failed"
          exit 1
        fi

    - name: Create release archives
      run: |
        echo "=== Creating Release Archives ==="
        mkdir -p release-artifacts

        APK_SOURCE="build/outputs/apk/unstable/release/latinime-unstable-release.apk"
        APK_DEST="release-artifacts/latinime-unstable-release.apk"

        echo "Copying APK from: $APK_SOURCE"
        echo "Copying APK to: $APK_DEST"

        if [ -f "$APK_SOURCE" ]; then
          cp "$APK_SOURCE" "$APK_DEST"
          echo "✅ APK copied successfully"
          ls -la "$APK_DEST"
        else
          echo "❌ Source APK not found: $APK_SOURCE"
          echo "Available files in release directory:"
          ls -la build/outputs/apk/unstable/release/ || echo "Directory not found"
          exit 1
        fi

    - name: Verify release artifacts
      run: |
        echo "=== Verifying Release Artifacts ==="
        echo "Contents of release-artifacts directory:"
        ls -la release-artifacts/

        APK_FILE="release-artifacts/latinime-unstable-release.apk"
        if [ -f "$APK_FILE" ]; then
          echo "✅ Release APK found: $APK_FILE"
          echo "Size: $(stat -c%s "$APK_FILE") bytes"
          echo "SHA256: $(sha256sum "$APK_FILE" | cut -d' ' -f1)"
        else
          echo "❌ Release APK not found: $APK_FILE"
          exit 1
        fi
        cd release-artifacts
        sha256sum latinime-unstable-release.apk > latinime-unstable-release.apk.sha256

    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        release_name: Release ${{ github.event.inputs.version || github.ref_name }}
        body: |
          ## FUTO Keyboard Release ${{ github.event.inputs.version || github.ref_name }}

          ### Changes
          - Ortholinear QWERTY layout with proper shifting
          - Improved longpress options for punctuation keys
          - Enhanced gesture support
          - Bug fixes and performance improvements

          ### Installation
          Download the APK file and install it on your Android device.

          ### SHA256 Checksum
          ```
          $(cat release-artifacts/latinime-unstable-release.apk.sha256)
          ```
        draft: false
        prerelease: false

    - name: Upload APK to release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/latinime-unstable-release.apk
        asset_name: latinime-unstable-release-${{ steps.version.outputs.version_name }}.apk
        asset_content_type: application/vnd.android.package-archive

    - name: Upload SHA256 checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/latinime-unstable-release.apk.sha256
        asset_name: latinime-unstable-release-${{ steps.version.outputs.version_name }}.apk.sha256
        asset_content_type: text/plain