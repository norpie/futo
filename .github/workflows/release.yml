name: Release APK

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  build:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make gradlew executable
      run: chmod +x ./gradlew

    - name: Setup keystore
      run: |
        echo "=== Setting up Keystore ==="
        if [ -n "${{ secrets.ANDROID_KEYSTORE }}" ]; then
          echo "✅ ANDROID_KEYSTORE secret is set"
          echo "${{ secrets.ANDROID_KEYSTORE }}" | base64 -d > release.keystore
          echo "✅ Keystore decoded and saved"
          ls -la release.keystore
        else
          echo "❌ ANDROID_KEYSTORE secret is not set"
          echo "Please set the ANDROID_KEYSTORE secret in GitHub repository settings"
          exit 1
        fi

        # Verify keystore with keytool
        echo "Verifying keystore..."
        if keytool -list -keystore release.keystore -storepass "${{ secrets.KEYSTORE_PASSWORD }}" -alias "${{ secrets.KEY_ALIAS }}" >/dev/null 2>&1; then
          echo "✅ Keystore verification successful"
        else
          echo "❌ Keystore verification failed"
          echo "Please check your keystore secrets configuration"
          exit 1
        fi

    - name: Build release APK
      run: |
        echo "=== Starting Release Build ==="
        ./gradlew assembleUnstableRelease --info
        BUILD_EXIT_CODE=$?
        echo "Build exit code: $BUILD_EXIT_CODE"

        if [ $BUILD_EXIT_CODE -ne 0 ]; then
          echo "❌ Build failed with exit code $BUILD_EXIT_CODE"
          exit 1
        fi

        echo "✅ Build completed successfully"
      env:
        ORG_GRADLE_PROJECT_keystorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
        ORG_GRADLE_PROJECT_keyAlias: ${{ secrets.KEY_ALIAS }}
        ORG_GRADLE_PROJECT_keyPassword: ${{ secrets.KEY_PASSWORD }}

    - name: Verify APK creation
      run: |
        echo "=== Checking APK Output ==="
        echo "Listing all APK files in build directory:"
        find build/outputs -name "*.apk" -exec ls -la {} \; 2>/dev/null || echo "No APK files found in build/outputs"

        APK_PATH="build/outputs/apk/unstable/release/futo-unstable-release.apk"

        if [ ! -f "$APK_PATH" ]; then
          echo "❌ APK not found at: $APK_PATH"
          echo "Contents of release directory:"
          ls -la build/outputs/apk/unstable/release/ 2>/dev/null || echo "Release directory not found"
          exit 1
        fi

        APK_SIZE=$(stat -f%z "$APK_PATH" 2>/dev/null || stat -c%s "$APK_PATH" 2>/dev/null || echo "unknown")
        echo "✅ APK found: $APK_PATH (size: $APK_SIZE bytes)"

    - name: Get version name
      id: version
      run: |
        echo "=== Getting Version Info ==="
        VERSION_NAME=$(./gradlew -q printVersionName | tail -1)
        echo "Raw version output: '$VERSION_NAME'"
        VERSION_NAME=$(echo "$VERSION_NAME" | tr -d '\n\r' | sed 's/^v//')
        echo "Cleaned version: '$VERSION_NAME'"
        echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
        echo "✅ Version: $VERSION_NAME"

    - name: Create release archives
      run: |
        echo "=== Creating Release Archives ==="
        mkdir -p release-artifacts

        if [ ! -f "build/outputs/apk/unstable/release/futo-unstable-release.apk" ]; then
          echo "❌ APK missing during archive creation"
          exit 1
        fi

        cp build/outputs/apk/unstable/release/futo-unstable-release.apk release-artifacts/
        cd release-artifacts
        sha256sum futo-unstable-release.apk > futo-unstable-release.apk.sha256
        echo "✅ Release archives created"
        ls -la

    - name: Create GitHub release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.version || github.ref_name }}
        name: Release ${{ github.event.inputs.version || github.ref_name }}
        body: |
          ## FUTO Keyboard Release ${{ github.event.inputs.version || github.ref_name }}

          ### Changes
          - Ortholinear QWERTY layout with proper shifting
          - Improved longpress options for punctuation keys
          - Enhanced gesture support
          - Bug fixes and performance improvements

          ### Installation
          Download the APK file and install it on your Android device.

          ### SHA256 Checksum
          ```
          $(cat release-artifacts/futo-unstable-release.apk.sha256)
          ```
        files: |
          release-artifacts/futo-unstable-release.apk
          release-artifacts/futo-unstable-release.apk.sha256
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}